#!/usr/bin/env bash

#   Copyright (C) 2019-2021 Daniel Alves - All Rights Reserved
# Permission to copy and modify is granted under the MIT license
#
#     -- The menu code is based on a script by Ingo Hollmann -- 
#
#   Copyright (C) 2017 Ingo Hollmann - All Rights Reserved
# Permission to copy and modify is granted under the Creative Commons Attribution 4.0 license
#

## colors
WHITE=$'\033[1;37m'
ORANGE=$'\033[0;33m'
RED=$'\033[0;31m'
BOLDRED=$'\033[1;31m'
INVRED=$'\033[1;97;41m'
GREEN=$'\033[1;32m'
CYAN=$'\033[0;36m'
BLUE=$'\033[0;34m'
LIGHTCYAN=$'\033[1;36m'
PURPLE=$'\033[0;35m'
LIGHTPURPLE=$'\033[1;35m'
YELLOW=$'\033[1;33m'
NC=$'\033[0m' # No Color
ASK_QUESTION=" ${YELLOW}??${NC} "
BREAK_CHAR=$'\n'
BREAK="${BREAK_CHAR}   ${YELLOW}>${NC} "

function _ask_do_merge() {
    local current_branch=$(git branch | grep \* | cut -d ' ' -f2 | tr -d '\n')
    if [[ p -eq 1 ]]; then
        git checkout $1
        git pull
        git checkout $current_branch
    fi
    read -rp " ${ASK_QUESTION} ${CYAN}Confirm merge from ${PURPLE}'${1}'${CYAN} into ${PURPLE}'${current_branch}'${CYAN} [y/n]:${BREAK}" INSTALL
    if [[ ${INSTALL,,} =~ ^(y|yes|j|ja|s|si|sim|o|oui)$ ]]; then
        git merge $1
    else
        echo "${RED}NOT MERGED!${NC}"
    fi
}

function _parse_branch() {
    echo "selected branch: $1"
    case $process in
        "clip") echo $1 | tr -d '\n' | xclip -selection c;;
        "branch") git checkout $1; if [[ p -eq 1 ]]; then git pull; fi;;
        "merge") _ask_do_merge $1;;
    esac;
}

cur=0
draw_menu() {
    for i in "${branches[@]}"; do
        if [[ ${branches[$cur]} == $i ]]; then
            tput setaf 2; echo " > $i"; tput sgr0
        else
            echo "   $i";
        fi
    done
}

clear_menu()  {
    for i in "${branches[@]}"; do tput cuu1; done
    tput ed
}

# Draw initial Menu
start_menu() {
    draw_menu
    while read -rsn1 key; do # 1 char (not delimiter), silent
        # Check for enter/space
        if [[ -z "$key" ]]; then break; fi

        # catch multi-char special key sequences
        read -sN1 -t 0.0001 k1; read -sN1 -t 0.0001 k2; read -sN1 -t 0.0001 k3
        key+=${k1}${k2}${k3}

        case "$key" in
            # cursor up, left: previous item
            i|j|$'\e[A'|$'\e0A'|$'\e[D'|$'\e0D') ((cur > 0)) && ((cur--));;
            # cursor down, right: next item
            k|l|$'\e[B'|$'\e0B'|$'\e[C'|$'\e0C') ((cur < ${#branches[@]}-1)) && ((cur++));;
            # home: first item
            $'\e[1~'|$'\e0H'|$'\e[H')  cur=0;;
            # end: last item
            $'\e[4~'|$'\e0F'|$'\e[F') ((cur=${#branches[@]}-1));;
            # q, carriage return: quit
            q|''|$'\e') echo "Aborted." && exit;;
        esac
        # Redraw menu
        clear_menu
        draw_menu
    done
}

p=0
r=""
process="clip"
while [[ "$#" -gt 0 ]]; do case $1 in
    -f|--fetch) git fetch;;
    -o|--origin) r="-r";;
    -b|--branch) process="branch";;
    -m|--merge) process="merge";;
    -p|--pull) p=1;;
    -*) echo "Unknown parameter passed: $1"; exit 1;;
    *) search_value=$1;;
esac; shift; done

declare -a branches=($(git branch ${r} | grep $search_value | tr -d '*' | tr -d ' '))
len=${#branches[@]}

if [ $len -eq 0 ]; then
    echo "no branch found"
elif [ $len -lt 2 ]; then
    _parse_branch ${branches#origin/}
elif [ $len -gt 30 ]; then
    echo "your search is too big (${len} results). Use a better filter"
else
    start_menu
    selected_branch=${branches[$cur]}
    _parse_branch ${selected_branch#origin/}
fi
